<?xml version="1.0" encoding="utf-8"?>
<root>
  <!-- 
    Microsoft ResX Schema 
    
    Version 2.0
    
    The primary goals of this format is to allow a simple XML format 
    that is mostly human readable. The generation and parsing of the 
    various data types are done through the TypeConverter classes 
    associated with the data types.
    
    Example:
    
    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>
                
    There are any number of "resheader" rows that contain simple 
    name/value pairs.
    
    Each data row contains a name, and value. The row also contains a 
    type or mimetype. Type corresponds to a .NET class that support 
    text/value conversion through the TypeConverter architecture. 
    Classes that don't support this are serialized and stored with the 
    mimetype set.
    
    The mimetype is used for serialized objects, and tells the 
    ResXResourceReader how to depersist the object. This is currently not 
    extensible. For a given mimetype the value must be set accordingly:
    
    Note - application/x-microsoft.net.object.binary.base64 is the format 
    that the ResXResourceWriter will generate, however the reader can 
    read any of the formats listed below.
    
    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array 
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:import namespace="http://www.w3.org/XML/1998/namespace" />
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" use="required" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <data name="ApplyDescription" xml:space="preserve">
    <value>入力設定を適用するウィンドウを指定します。(Apply)</value>
  </data>
  <data name="ApplyDisplayName" xml:space="preserve">
    <value>入力設定を適用</value>
  </data>
  <data name="ApplyResultDescription" xml:space="preserve">
    <value>結果を受け取ります。結果は、成功の場合に True、失敗の場合に False となります。</value>
  </data>
  <data name="ApplyResultDisplayName" xml:space="preserve">
    <value>結果</value>
  </data>
  <data name="ApplyWindowHandleDescription" xml:space="preserve">
    <value>入力設定を適用するウィンドウの Win32 ハンドルです。Window、Browser、そして UiElement も指定可能です。</value>
  </data>
  <data name="ApplyWindowHandleDisplayName" xml:space="preserve">
    <value>ウィンドウハンドル</value>
  </data>
  <data name="BlockKeyboardInputDescription" xml:space="preserve">
    <value>人間によるキーボード入力をブロックするかどうかを指定します。True でブロックし、False でブロックしません。</value>
  </data>
  <data name="BlockKeyboardInputDisplayName" xml:space="preserve">
    <value>ブロック(キーボード入力)</value>
  </data>
  <data name="BlockMouseInputDescription" xml:space="preserve">
    <value>人間によるマウス入力をブロックするかどうかを指定します。True でブロックし、False でブロックしません。</value>
  </data>
  <data name="BlockMouseInputDisplayName" xml:space="preserve">
    <value>ブロック(マウス入力)</value>
  </data>
  <data name="ConfigureDescription" xml:space="preserve">
    <value>入力設定を適用アクティビティで指定されるウィンドウに対する入力設定を行います。(Configure)</value>
  </data>
  <data name="ConfigureDisplayName" xml:space="preserve">
    <value>入力設定を行う</value>
  </data>
  <data name="DisableInputMethodEditorDescription" xml:space="preserve">
    <value>IME を無効化するかどうかを指定します。True で無効化し、False で無効化しません。</value>
  </data>
  <data name="DisableInputMethodEditorDisplayName" xml:space="preserve">
    <value>IME を無効化</value>
  </data>
  <data name="ForceKeyboardLayoutDescription" xml:space="preserve">
    <value>指定キーボードレイアウトが利用可能な場合、強制的に変更するかどうかを指定します。True で強制的に変更し、False でそのままです。</value>
  </data>
  <data name="ForceKeyboardLayoutDisplayName" xml:space="preserve">
    <value>指定キーボードレイアウトに強制変更</value>
  </data>
  <data name="InitializeDescription" xml:space="preserve">
    <value>キーボード拡張機能アクティビティパッケージを初期化します。(Initialize)</value>
  </data>
  <data name="InitializeDisplayName" xml:space="preserve">
    <value>キーボード拡張機能を初期化</value>
  </data>
  <data name="InputCategory" xml:space="preserve">
    <value>入力</value>
  </data>
  <data name="OutputCategory" xml:space="preserve">
    <value>出力</value>
  </data>
  <data name="PreferredKeyboardLayoutDescription" xml:space="preserve">
    <value>フラグがセットされた場合に適用されるキーボードレイアウトの言語 ID です。</value>
  </data>
  <data name="PreferredKeyboardLayoutDisplayName" xml:space="preserve">
    <value>適用したいキーボードレイアウト</value>
  </data>
  <data name="RestoreDescription" xml:space="preserve">
    <value>入力設定を適用アクティビティで指定されたウィンドウに対する入力設定を解除します。(Restore)</value>
  </data>
  <data name="RestoreDisplayName" xml:space="preserve">
    <value>入力設定を解除</value>
  </data>
  <data name="RestoreWindowHandleDescription" xml:space="preserve">
    <value>元に戻すウィンドウのWin32ハンドルです。Window、Browser、そして UiElement も指定可能です。省略時はすべてのウィンドウを元に戻します。</value>
  </data>
  <data name="RestoreWindowHandleDisplayName" xml:space="preserve">
    <value>ウィンドウハンドル</value>
  </data>
  <data name="ToggleSequenceDescription" xml:space="preserve">
    <value>入力設定の適用と非適用を交互に切り替えるキーシーケンスを指定します。仮想キー名を受け付けます。プラス記号でキー名を複数指定できます。</value>
  </data>
  <data name="ToggleSequenceDisplayName" xml:space="preserve">
    <value>トグルシーケンス</value>
  </data>
  <data name="UninitializeDescription" xml:space="preserve">
    <value>キーボード拡張機能アクティビティパッケージを終了化します。(Uninitialize)</value>
  </data>
  <data name="UninitializeDisplayName" xml:space="preserve">
    <value>キーボード拡張機能を終了化</value>
  </data>
</root>