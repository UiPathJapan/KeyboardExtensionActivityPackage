<?xml version="1.0" encoding="utf-8"?>
<root>
  <!-- 
    Microsoft ResX Schema 
    
    Version 2.0
    
    The primary goals of this format is to allow a simple XML format 
    that is mostly human readable. The generation and parsing of the 
    various data types are done through the TypeConverter classes 
    associated with the data types.
    
    Example:
    
    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>
                
    There are any number of "resheader" rows that contain simple 
    name/value pairs.
    
    Each data row contains a name, and value. The row also contains a 
    type or mimetype. Type corresponds to a .NET class that support 
    text/value conversion through the TypeConverter architecture. 
    Classes that don't support this are serialized and stored with the 
    mimetype set.
    
    The mimetype is used for serialized objects, and tells the 
    ResXResourceReader how to depersist the object. This is currently not 
    extensible. For a given mimetype the value must be set accordingly:
    
    Note - application/x-microsoft.net.object.binary.base64 is the format 
    that the ResXResourceWriter will generate, however the reader can 
    read any of the formats listed below.
    
    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array 
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:import namespace="http://www.w3.org/XML/1998/namespace" />
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" use="required" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <data name="ApplyDescription" xml:space="preserve">
    <value>Designates a window to apply the input settings to.</value>
  </data>
  <data name="ApplyDisplayName" xml:space="preserve">
    <value>Apply Input Settings</value>
  </data>
  <data name="ApplyResultDescription" xml:space="preserve">
    <value>Receives the result, which is true on success and is false on failure.</value>
  </data>
  <data name="ApplyResultDisplayName" xml:space="preserve">
    <value>Result</value>
  </data>
  <data name="ApplyWindowHandleDescription" xml:space="preserve">
    <value>Win32 Handle of a window to apply the input settings to. Window, Browser, and UiElement are also acceptable.</value>
  </data>
  <data name="ApplyWindowHandleDisplayName" xml:space="preserve">
    <value>Window Handle</value>
  </data>
  <data name="BlockKeyboardInputDescription" xml:space="preserve">
    <value>Specifies whether to block human keyboard input or not. True to block. False not to.</value>
  </data>
  <data name="BlockKeyboardInputDisplayName" xml:space="preserve">
    <value>Block Keyboard Input</value>
  </data>
  <data name="BlockMouseInputDescription" xml:space="preserve">
    <value>Specifies whether to block human mouse input or not. True to block. False not to.</value>
  </data>
  <data name="BlockMouseInputDisplayName" xml:space="preserve">
    <value>Block Mouse Input</value>
  </data>
  <data name="ConfigureDescription" xml:space="preserve">
    <value>Configures the input settings for the windows designated by the Apply activity.</value>
  </data>
  <data name="ConfigureDisplayName" xml:space="preserve">
    <value>Configure Input Settings</value>
  </data>
  <data name="DisableInputMethodEditorDescription" xml:space="preserve">
    <value>Specifies whether to disable Input Method Editor or not. True to disable. False not to.</value>
  </data>
  <data name="DisableInputMethodEditorDisplayName" xml:space="preserve">
    <value>Disable Input Method Editor</value>
  </data>
  <data name="ForceKeyboardLayoutDescription" xml:space="preserve">
    <value>Specifies whether to force the preferred keyboard layout if available or not. True to force. False not to.</value>
  </data>
  <data name="ForceKeyboardLayoutDisplayName" xml:space="preserve">
    <value>Force Keyboard Layout</value>
  </data>
  <data name="GetStateConversionModeDescription" xml:space="preserve">
    <value>Receives the ConversionMode compartment value.</value>
  </data>
  <data name="GetStateConversionModeDisplayName" xml:space="preserve">
    <value>ConversionMode</value>
  </data>
  <data name="GetStateDescription" xml:space="preserve">
    <value>Retrieves the keyboard layout and the compartment values set in the designated window.</value>
  </data>
  <data name="GetStateDisplayName" xml:space="preserve">
    <value>Get Keyboard State</value>
  </data>
  <data name="GetStateKeyboardLayoutDescription" xml:space="preserve">
    <value>Receives the language identifier of the keyboard layout.</value>
  </data>
  <data name="GetStateKeyboardLayoutDisplayName" xml:space="preserve">
    <value>Keyboard Layout</value>
  </data>
  <data name="GetStateKeyboardOpenCloseDescription" xml:space="preserve">
    <value>Receives the KeyboardOpenClose compartment value. True when IME is turned on. Otherwise, False.</value>
  </data>
  <data name="GetStateKeyboardOpenCloseDisplayName" xml:space="preserve">
    <value>KeyboardOpenClose</value>
  </data>
  <data name="GetStateWindowHandleDescription" xml:space="preserve">
    <value>Win32 Handle of a window to retrieve the keyboard state from. Window, Browser, and UiElement are also acceptble.</value>
  </data>
  <data name="GetStateWindowHandleDisplayName" xml:space="preserve">
    <value>Window Handle</value>
  </data>
  <data name="InitializeDescription" xml:space="preserve">
    <value>Initializes the keyboard extension activity package.</value>
  </data>
  <data name="InitializeDisplayName" xml:space="preserve">
    <value>Initialize Keyboard Extension</value>
  </data>
  <data name="InputCategory" xml:space="preserve">
    <value>Input</value>
  </data>
  <data name="OutputCategory" xml:space="preserve">
    <value>Output</value>
  </data>
  <data name="PreferredKeyboardLayoutDescription" xml:space="preserve">
    <value>Language ID of the preferred keyboard layout to be set if the flag is set.</value>
  </data>
  <data name="PreferredKeyboardLayoutDisplayName" xml:space="preserve">
    <value>Preferred Keyboard Layout</value>
  </data>
  <data name="RestoreDescription" xml:space="preserve">
    <value>Restores the input settings for the UI elements designated by the Apply activity.</value>
  </data>
  <data name="RestoreDisplayName" xml:space="preserve">
    <value>Restore Input Settings</value>
  </data>
  <data name="RestoreWindowHandleDescription" xml:space="preserve">
    <value>Win32 Handle of a window to restore. Window, Browser, and UiElement are also acceptable. If omitted, all applied windows will be restored.</value>
  </data>
  <data name="RestoreWindowHandleDisplayName" xml:space="preserve">
    <value>Window Handle</value>
  </data>
  <data name="ToggleSequenceDescription" xml:space="preserve">
    <value>Specifies the key combination to toggle on/off state of the input settings. Virtual key names are accepted. Plus sign combines keys.</value>
  </data>
  <data name="ToggleSequenceDisplayName" xml:space="preserve">
    <value>Toggle Sequence</value>
  </data>
  <data name="UninitializeDescription" xml:space="preserve">
    <value>Uninitializes the keyboard extension activity package.</value>
  </data>
  <data name="UninitializeDisplayName" xml:space="preserve">
    <value>Uninitialize Keyboard Extension</value>
  </data>
</root>